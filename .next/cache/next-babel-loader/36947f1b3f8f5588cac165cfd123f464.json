{"ast":null,"code":"import { makeSchema, queryType, objectType } from \"@nexus/schema\";\nimport { nexusSchemaPrisma } from \"nexus-plugin-prisma/schema\";\nimport path from \"path\";\nconst Company = objectType({\n  name: \"Company\",\n\n  definition(t) {\n    t.model.id();\n    t.model.symbol();\n    t.model.name();\n    t.model.description();\n  }\n\n});\nconst Query = queryType({\n  definition(t) {\n    t.crud.company(); // t.field(\"company\", {\n    //   type: Company,\n    //   nullable: true,\n    //   args: {\n    //     id: idArg(),\n    //   },\n    //   resolve: (_root, { id }, ctx) => {\n    //     return ctx.prisma.company.findOne({ where: { id: Number(id) } });\n    //   },\n    // });\n  }\n\n});\nexport const schema = makeSchema({\n  types: {\n    Query,\n    Company\n  },\n  plugins: [nexusSchemaPrisma({\n    experimentalCRUD: true\n  })],\n  outputs: {\n    schema: path.join(process.cwd(), \"schema.graphql\"),\n    typegen: path.join(process.cwd(), \"nexus.ts\")\n  },\n  typegenAutoConfig: {\n    contextType: \"Context.Context\",\n    sources: [{\n      source: \"@prisma/client\",\n      alias: \"prisma\"\n    }, {\n      source: require.resolve(\"./context\"),\n      alias: \"Context\"\n    }]\n  }\n});","map":{"version":3,"sources":["/Users/sebastianhiguita/Desktop/react/nextjs-prisma-nexus-schema/src/schema.ts"],"names":["makeSchema","queryType","objectType","nexusSchemaPrisma","path","Company","name","definition","t","model","id","symbol","description","Query","crud","company","schema","types","plugins","experimentalCRUD","outputs","join","process","cwd","typegen","typegenAutoConfig","contextType","sources","source","alias","require","resolve"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,QAAyD,eAAzD;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,OAAO,GAAGH,UAAU,CAAC;AACzBI,EAAAA,IAAI,EAAE,SADmB;;AAEzBC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,KAAF,CAAQC,EAAR;AACAF,IAAAA,CAAC,CAACC,KAAF,CAAQE,MAAR;AACAH,IAAAA,CAAC,CAACC,KAAF,CAAQH,IAAR;AACAE,IAAAA,CAAC,CAACC,KAAF,CAAQG,WAAR;AACD;;AAPwB,CAAD,CAA1B;AAUA,MAAMC,KAAK,GAAGZ,SAAS,CAAC;AACtBM,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACM,IAAF,CAAOC,OAAP,GADY,CAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAbqB,CAAD,CAAvB;AAgBA,OAAO,MAAMC,MAAM,GAAGhB,UAAU,CAAC;AAC/BiB,EAAAA,KAAK,EAAE;AAAEJ,IAAAA,KAAF;AAASR,IAAAA;AAAT,GADwB;AAE/Ba,EAAAA,OAAO,EAAE,CAACf,iBAAiB,CAAC;AAAEgB,IAAAA,gBAAgB,EAAE;AAApB,GAAD,CAAlB,CAFsB;AAG/BC,EAAAA,OAAO,EAAE;AACPJ,IAAAA,MAAM,EAAEZ,IAAI,CAACiB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,gBAAzB,CADD;AAEPC,IAAAA,OAAO,EAAEpB,IAAI,CAACiB,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB;AAFF,GAHsB;AAO/BE,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,WAAW,EAAE,iBADI;AAEjBC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,MAAM,EAAE,gBADV;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADO,EAKP;AACED,MAAAA,MAAM,EAAEE,OAAO,CAACC,OAAR,CAAgB,WAAhB,CADV;AAEEF,MAAAA,KAAK,EAAE;AAFT,KALO;AAFQ;AAPY,CAAD,CAAzB","sourcesContent":["import { makeSchema, queryType, objectType, idArg } from \"@nexus/schema\";\nimport { nexusSchemaPrisma } from \"nexus-plugin-prisma/schema\";\nimport path from \"path\";\n\nconst Company = objectType({\n  name: \"Company\",\n  definition(t) {\n    t.model.id();\n    t.model.symbol();\n    t.model.name();\n    t.model.description();\n  },\n});\n\nconst Query = queryType({\n  definition(t) {\n    t.crud.company();\n    // t.field(\"company\", {\n    //   type: Company,\n    //   nullable: true,\n    //   args: {\n    //     id: idArg(),\n    //   },\n    //   resolve: (_root, { id }, ctx) => {\n    //     return ctx.prisma.company.findOne({ where: { id: Number(id) } });\n    //   },\n    // });\n  },\n});\n\nexport const schema = makeSchema({\n  types: { Query, Company },\n  plugins: [nexusSchemaPrisma({ experimentalCRUD: true })],\n  outputs: {\n    schema: path.join(process.cwd(), \"schema.graphql\"),\n    typegen: path.join(process.cwd(), \"nexus.ts\"),\n  },\n  typegenAutoConfig: {\n    contextType: \"Context.Context\",\n    sources: [\n      {\n        source: \"@prisma/client\",\n        alias: \"prisma\",\n      },\n      {\n        source: require.resolve(\"./context\"),\n        alias: \"Context\",\n      },\n    ],\n  },\n});\n"]},"metadata":{},"sourceType":"module"}