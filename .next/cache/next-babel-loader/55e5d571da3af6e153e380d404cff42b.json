{"ast":null,"code":"import { makeSchema, queryType, objectType, idArg } from \"@nexus/schema\";\nimport { nexusSchemaPrisma } from \"nexus-plugin-prisma/schema\";\nimport path from \"path\";\nconst Company = objectType({\n  name: \"Company\",\n\n  definition(t) {\n    t.model.id();\n    t.model.symbol();\n    t.model.name();\n    t.model.description();\n  }\n\n});\nconst Query = queryType({\n  definition(t) {\n    t.field(\"company\", {\n      type: Company,\n      nullable: true,\n      args: {\n        id: idArg()\n      },\n      resolve: (_root, {\n        id\n      }, ctx) => {\n        return ctx.prisma.company.findOne({\n          where: {\n            id: Number(id)\n          }\n        });\n      }\n    });\n  }\n\n});\nexport const schema = makeSchema({\n  types: {\n    Query,\n    Company\n  },\n  plugins: [nexusSchemaPrisma()],\n  outputs: {\n    schema: path.join(process.cwd(), \"schema.graphql\"),\n    typegen: path.join(process.cwd(), \"nexus.ts\")\n  },\n  typegenAutoConfig: {\n    contextType: \"Context.Context\",\n    sources: [{\n      source: \"@prisma/client\",\n      alias: \"prisma\"\n    }, {\n      source: require.resolve(\"./context\"),\n      alias: \"Context\"\n    }]\n  }\n});","map":{"version":3,"sources":["/Users/sebastianhiguita/Desktop/react/nextjs-prisma-nexus-schema/src/schema.ts"],"names":["makeSchema","queryType","objectType","idArg","nexusSchemaPrisma","path","Company","name","definition","t","model","id","symbol","description","Query","field","type","nullable","args","resolve","_root","ctx","prisma","company","findOne","where","Number","schema","types","plugins","outputs","join","process","cwd","typegen","typegenAutoConfig","contextType","sources","source","alias","require"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,KAA5C,QAAyD,eAAzD;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,OAAO,GAAGJ,UAAU,CAAC;AACzBK,EAAAA,IAAI,EAAE,SADmB;;AAEzBC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,KAAF,CAAQC,EAAR;AACAF,IAAAA,CAAC,CAACC,KAAF,CAAQE,MAAR;AACAH,IAAAA,CAAC,CAACC,KAAF,CAAQH,IAAR;AACAE,IAAAA,CAAC,CAACC,KAAF,CAAQG,WAAR;AACD;;AAPwB,CAAD,CAA1B;AAUA,MAAMC,KAAK,GAAGb,SAAS,CAAC;AACtBO,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACM,KAAF,CAAQ,SAAR,EAAmB;AACjBC,MAAAA,IAAI,EAAEV,OADW;AAEjBW,MAAAA,QAAQ,EAAE,IAFO;AAGjBC,MAAAA,IAAI,EAAE;AACJP,QAAAA,EAAE,EAAER,KAAK;AADL,OAHW;AAMjBgB,MAAAA,OAAO,EAAE,CAACC,KAAD,EAAQ;AAAET,QAAAA;AAAF,OAAR,EAAgBU,GAAhB,KAAwB;AAC/B,eAAOA,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B;AAAEC,UAAAA,KAAK,EAAE;AAAEd,YAAAA,EAAE,EAAEe,MAAM,CAACf,EAAD;AAAZ;AAAT,SAA3B,CAAP;AACD;AARgB,KAAnB;AAUD;;AAZqB,CAAD,CAAvB;AAeA,OAAO,MAAMgB,MAAM,GAAG3B,UAAU,CAAC;AAC/B4B,EAAAA,KAAK,EAAE;AAAEd,IAAAA,KAAF;AAASR,IAAAA;AAAT,GADwB;AAE/BuB,EAAAA,OAAO,EAAE,CAACzB,iBAAiB,EAAlB,CAFsB;AAG/B0B,EAAAA,OAAO,EAAE;AACPH,IAAAA,MAAM,EAAEtB,IAAI,CAAC0B,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,gBAAzB,CADD;AAEPC,IAAAA,OAAO,EAAE7B,IAAI,CAAC0B,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB;AAFF,GAHsB;AAO/BE,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,WAAW,EAAE,iBADI;AAEjBC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,MAAM,EAAE,gBADV;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADO,EAKP;AACED,MAAAA,MAAM,EAAEE,OAAO,CAACrB,OAAR,CAAgB,WAAhB,CADV;AAEEoB,MAAAA,KAAK,EAAE;AAFT,KALO;AAFQ;AAPY,CAAD,CAAzB","sourcesContent":["import { makeSchema, queryType, objectType, idArg } from \"@nexus/schema\";\nimport { nexusSchemaPrisma } from \"nexus-plugin-prisma/schema\";\nimport path from \"path\";\n\nconst Company = objectType({\n  name: \"Company\",\n  definition(t) {\n    t.model.id();\n    t.model.symbol();\n    t.model.name();\n    t.model.description();\n  },\n});\n\nconst Query = queryType({\n  definition(t) {\n    t.field(\"company\", {\n      type: Company,\n      nullable: true,\n      args: {\n        id: idArg(),\n      },\n      resolve: (_root, { id }, ctx) => {\n        return ctx.prisma.company.findOne({ where: { id: Number(id) } });\n      },\n    });\n  },\n});\n\nexport const schema = makeSchema({\n  types: { Query, Company },\n  plugins: [nexusSchemaPrisma()],\n  outputs: {\n    schema: path.join(process.cwd(), \"schema.graphql\"),\n    typegen: path.join(process.cwd(), \"nexus.ts\"),\n  },\n  typegenAutoConfig: {\n    contextType: \"Context.Context\",\n    sources: [\n      {\n        source: \"@prisma/client\",\n        alias: \"prisma\",\n      },\n      {\n        source: require.resolve(\"./context\"),\n        alias: \"Context\",\n      },\n    ],\n  },\n});\n"]},"metadata":{},"sourceType":"module"}